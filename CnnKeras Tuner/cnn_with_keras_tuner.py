# -*- coding: utf-8 -*-
"""CNN WITH KERAS TUNER.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p7QA8wwGWNh2u5GCNM9RpcUYKYbTGnXm
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
from kerastuner import RandomSearch
from kerastuner.engine.hyperparameters import HyperParameters
from tensorflow.keras import regularizers

print(tf.__version__)

fashion_mnist= keras.datasets.fashion_mnist

(train_images,train_labels),(test_images,test_labels)=fashion_mnist.load_data()

train_images = train_images / 255.0
test_images = test_images / 255.0

train_images = train_images.reshape(len(train_images),28,28,1)
test_images = test_images.reshape(len(test_images),28,28,1)

def build_model(hp):
    model = keras.Sequential()
    model.add(keras.layers.Conv2D( 
                filters = hp.Int('conv_filter', min_value=32, max_value=128, step=16),
                kernel_size = hp.Choice('conv_kernal',values=range(3,6)),
                activation = 'relu',
                input_shape = (28,28,1)
                ))
    for i in range(hp.Int('conv_layers', 0, 10)):
             model.add(keras.layers.Conv2D( 
                filters = hp.Int('conv'+str(i)+'_filter', min_value=32, max_value=128, step=16),
                kernel_size = hp.Choice('conv'+str(i)+'_kernal',values=range(3,6)),
                activation = 'relu'
                ))
    model.add(keras.layers.Flatten())
    for i in range(hp.Int('dense_layers', 1, 5)):
        model.add(keras.layers.Dense(
            units = hp.Int('dense'+str(i)+'_units',min_value=32, max_value=128,step=16),
            kernel_regularizer = regularizers.l2(l2=hp.Choice('l2',values = [1e-1,1e-2,1e-3])),
            activation = 'relu' 
        ))
    model.add(keras.layers.Dense(10,activation='softmax'))
    model.compile(
        optimizer = keras.optimizers.Adam(hp.Choice('learning_rate',values = [1e-2,1e-3,1e-4])),
        loss = 'sparse_categorical_crossentropy',
        metrics =['accuracy']
        )
    return model

tuner_search = RandomSearch(
    build_model,
    objective='val_accuracy',
    max_trials=5,
    directory= 'output',
    project_name = 'Mnist_classifier'

)

tuner_search.search(train_images,train_labels,epochs =3 ,validation_split = 0.1)

lm = tuner_search.get_best_models(num_models=1)[0]

lm.fit(train_images,train_labels,epochs =10 )

x=np.argmax(lm.predict(test_images),axis=-1)

count=0
for i,l in zip(np.argmax(lm.predict(test_images),axis=-1),test_labels):
    if i == l:
        count+=1

output_dictionary = {
    'Validate_images' : len(x),
    'Correct_predict' : count,
    'Incorrect_predict' :  len(x)-count,
    'Correct_predict_percentage' : str(round((count/len(x))* 100,2)) + '%',
    'Incorrect_predict_percentage' : str(round((100 - (count/len(x))* 100) ,2) )+ '%'
}

output_dictionary

